<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="test_HR2_preIter" type="PreIterate">
          
    
    <Description>This rule is called before the connector processes the data in a file.</Description>
          
    
    <Signature returnType="void">
                    
        
        <Inputs>
                              
            
            <Argument name="log">
                                        
                
                <Description>
          The log object associated with the SailPointContext.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="context">
                                        
                
                <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="application">
                                        
                
                <Description>
          Application being iterated.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="schema">
                                        
                
                <Description>
          Schema representing the data being iterated.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="stats">
                                        
                
                <Description>
          A map passed by the connector of the stats for the file about to be iterated.
          Contains keys:
          fileName : (String) filename of the file about to be processed
          absolutePath : (String) absolute filename
          length : (Long) length in bytes
          lastModified : (Long) last time the file was updated Java GMT
        </Description>
                                      
            
            </Argument>
                            
        
        </Inputs>
                  
    
    </Signature>
          
    
    <Source><![CDATA[ import sailpoint.api.*;
  import sailpoint.object.*;
  import java.util.*;
  import java.text.*;
  import java.nio.charset.StandardCharsets;
  import java.nio.file.Paths;
  import java.nio.file.Files;
  import sailpoint.tools.Util;
  import java.util.stream.*;

  String output;
  boolean header = true;
  Map globalMap = new HashMap();

  String fileName = application.getAttributes().get("file");

  List lines = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);

  if (null != lines && !lines.isEmpty()) {
    for (String line : lines) {
      if(header)
      {
        header=false;
        continue;
      } 

      String[] str = line.split(";");
      List columns = Arrays.asList(str);
      String personnalID = columns.get(5);

      if (globalMap.get(personnalID) == null) {
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        Date date = sdf.parse(columns.get(4));
        Map valueMap = new HashMap();
        valueMap.put("line",line);
        valueMap.put("endDate", date);
        globalMap.put(personnalID, valueMap); 
        System.out.println("------globalMap"+globalMap);

      } else {
        Set keys = globalMap.keySet();
        List listKeys = keys.stream().collect(Collectors.toList());
        System.out.println("listKeys-"+listKeys);
        if(listKeys.contains(personnalID)){
          System.out.println("****"+personnalID);
          Map map = globalMap.get(personnalID);
          Date endD = map.get("endDate");
          SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
          Date date = sdf.parse(columns.get(4));
          if(Util.isDateAfter(date,endD)){
            map.put("endDate", date);
            map.put("line", line);
            globalMap.put(personnalID,map);
            System.out.println("1111111111"+globalMap);

          }
        }

      }

    }   

  }

  output = "First Name;Last Name;Workorder_External candidate e-mail address;Object Start Date;Object End Date;Personnel ID;Object Owner Username"+"\n";
  for(String key :globalMap.keySet()){
    output = output + "\n" +globalMap.get(key).get("line");
  }


  return  new ByteArrayInputStream(output.getBytes());
  ]]></Source>
        

</Rule>
