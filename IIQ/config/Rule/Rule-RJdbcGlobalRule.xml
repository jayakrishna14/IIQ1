<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="r JDBC Global Rule" type="JDBCProvision">
          
    
    <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
          
    
    <Signature returnType="ProvisioningResult">
                    
        
        <Inputs>
                              
            
            <Argument name="log" type="org.apache.commons.logging.Log">
                                        
                
                <Description>
          The log object associated with the SailPointContext.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="context" type="sailpoint.api.SailPointContext">
                                        
                
                <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="application">
                                        
                
                <Description>
          The application whose data file is being processed.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="schema">
                                        
                
                <Description>
          The Schema currently in use.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="connection">
                                        
                
                <Description>
          A connection object to connect to database.
        </Description>
                                      
            
            </Argument>
                              
            
            <Argument name="plan">
                                        
                
                <Description>
          The ProvisioningPlan created against the JDBC application.
        </Description>
                                      
            
            </Argument>
                            
        
        </Inputs>
                    
        
        <Returns>
                              
            
            <Argument name="result">
                                        
                
                <Description>
          A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan
        </Description>
                                      
            
            </Argument>
                            
        
        </Returns>
                  
    
    </Signature>
          
    
    <Source><![CDATA[import java.sql.ResultSet;
  import java.sql.Statement;
  import java.sql.Connection;
  import java.sql.DriverManager;
  import java.sql.Types;
  import sailpoint.api.SailPointContext;  
  import sailpoint.object.Identity;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import java.sql.PreparedStatement;
  import java.sql.SQLException;
  import java.sql.Date;
  import sailpoint.object.PasswordPolicy;
  import sailpoint.api.PasswordGenerator;
  import sailpoint.object.ProvisioningResult;
  //import sailpoint.integration.*;

  ProvisioningResult provresult = new ProvisioningResult();

  if ( plan != null ) {

    String user = plan.getNativeIdentity();
    Identity identity = context.getObjectByName(Identity.class, user);

    List accRequests = plan.getAccountRequests();
    if ( ( accRequests != null ) && ( accRequests.size() > 0 ) ) {
      for(AccountRequest accRequest : accRequests) {
        try{
          //for Create Operation---
          if(AccountRequest.Operation.Create.equals(accRequest.getOperation())) {
            System.out.println("Plan Operation is === "+accRequest.getOperation());
            List AddReqList=new ArrayList();

            List attribReqs=accRequest.getAttributeRequests();
            System.out.println("attribReqs==="+attribReqs);
            for(AttributeRequest attribReq:attribReqs){
              System.out.println("attribReqName==="+attribReq.getName()+"\t"+"attribReqOp==="+attribReq.getOperation()+"\t"+"attribReqVal==="+attribReq.getValue());
              if(attribReq.getName().equals("GroupId") /* && attribReq.getOperation().toString().equals("Add") */) AddReqList.add(attribReq.getValue());
            }
            System.out.println("AddReqList==="+AddReqList+" Size="+AddReqList.size());
            if(AddReqList.size()>0){
              for(String Req:AddReqList){
                String query ="INSERT INTO test.jdbcusers VALUES(?,?,?,?,?,?,?)";
                PreparedStatement st = connection.prepareStatement(query);
                if(accRequest.getAttributeRequest("Name") != null) st.setString(1, accRequest.getAttributeRequest("Name").getValue());
                if(accRequest.getAttributeRequest("FirstName") != null) st.setString(2, accRequest.getAttributeRequest("FirstName").getValue());
                if(accRequest.getAttributeRequest("LastName") != null) st.setString(3, accRequest.getAttributeRequest("LastName").getValue());
                if(accRequest.getAttributeRequest("EmployeeID") != null) st.setString(4, accRequest.getAttributeRequest("EmployeeID").getValue());
                if(accRequest.getAttributeRequest("EmailAddress") != null) st.setString(5, accRequest.getAttributeRequest("EmailAddress").getValue());
                if(accRequest.getAttributeRequest("NetworkID") != null) st.setString(6, accRequest.getAttributeRequest("NetworkID").getValue());
                st.setString(7,  Req);
                System.out.println("FinalQuery===INSERT INTO test.jdbcusers VALUES("+accRequest.getAttributeRequest("Name").getValue()+","+accRequest.getAttributeRequest("FirstName").getValue()+","+accRequest.getAttributeRequest("LastName").getValue()+","+accRequest.getAttributeRequest("EmployeeID").getValue()+","+accRequest.getAttributeRequest("EmailAddress").getValue()+","+accRequest.getAttributeRequest("NetworkID").getValue()+","+Req+")");
                st.executeUpdate();
              }
            }
            else if(AddReqList.size()==0){
              String query ="INSERT INTO test.jdbcusers VALUES(?,?,?,?,?,?,?)";
              PreparedStatement st = connection.prepareStatement(query);
              if(accRequest.getAttributeRequest("Name") != null) st.setString(1, accRequest.getAttributeRequest("Name").getValue());
              if(accRequest.getAttributeRequest("FirstName") != null) st.setString(2, accRequest.getAttributeRequest("FirstName").getValue());
              if(accRequest.getAttributeRequest("LastName") != null) st.setString(3, accRequest.getAttributeRequest("LastName").getValue());
              if(accRequest.getAttributeRequest("EmployeeID") != null) st.setString(4, accRequest.getAttributeRequest("EmployeeID").getValue());
              if(accRequest.getAttributeRequest("EmailAddress") != null) st.setString(5, accRequest.getAttributeRequest("EmailAddress").getValue());
              if(accRequest.getAttributeRequest("NetworkID") != null) st.setString(6, accRequest.getAttributeRequest("NetworkID").getValue());
              st.setString(7,  null);
              System.out.println("FinalQuery===INSERT INTO test.jdbcusers VALUES("+accRequest.getAttributeRequest("Name").getValue()+","+accRequest.getAttributeRequest("FirstName").getValue()+","+accRequest.getAttributeRequest("LastName").getValue()+","+accRequest.getAttributeRequest("EmployeeID").getValue()+","+accRequest.getAttributeRequest("EmailAddress").getValue()+","+accRequest.getAttributeRequest("NetworkID").getValue()+","+"null)");
              st.executeUpdate();
            }
            provresult.setStatus(ProvisioningResult.STATUS_COMMITTED);
            System.out.println("JDBC Application- Create User Result is " +provresult.toXml());
          }


          //for Modify Operation---
          if(AccountRequest.Operation.Modify.equals(accRequest.getOperation())) {
            System.out.println("Plan Operation is === "+accRequest.getOperation());
            List AddReqList=new ArrayList();
            List RemReqList=new ArrayList();

            List attribReqs=accRequest.getAttributeRequests();
            for(AttributeRequest attribReq:attribReqs){
              if(attribReq.getName().equals("GroupId") && attribReq.getOperation().toString().equals("Add")) AddReqList.add(attribReq.getValue());
              if(attribReq.getName().equals("GroupId") && attribReq.getOperation().toString().equals("Remove")) RemReqList.add(attribReq.getValue());
            }
            for(String Req:AddReqList){
              String query ="INSERT INTO test.jdbcusers VALUES(?,?,?,?,?,?,?)";
              PreparedStatement st = connection.prepareStatement(query);
              if(accRequest.getAttributeRequest("Name") != null) st.setString(1, accRequest.getAttributeRequest("Name").getValue());
              if(accRequest.getAttributeRequest("FirstName") != null) st.setString(2, accRequest.getAttributeRequest("FirstName").getValue());
              if(accRequest.getAttributeRequest("LastName") != null) st.setString(3, accRequest.getAttributeRequest("LastName").getValue());
              if(accRequest.getAttributeRequest("EmployeeID") != null) st.setString(4, accRequest.getAttributeRequest("EmployeeID").getValue());
              if(accRequest.getAttributeRequest("EmailAddress") != null) st.setString(5, accRequest.getAttributeRequest("EmailAddress").getValue());
              if(accRequest.getAttributeRequest("NetworkID") != null) st.setString(6, accRequest.getAttributeRequest("NetworkID").getValue());
              st.setString(7,  Req);
              System.out.println("FinalQuery===INSERT INTO test.jdbcusers VALUES("+accRequest.getAttributeRequest("Name").getValue()+","+accRequest.getAttributeRequest("FirstName").getValue()+","+accRequest.getAttributeRequest("LastName").getValue()+","+accRequest.getAttributeRequest("EmployeeID").getValue()+","+accRequest.getAttributeRequest("EmailAddress").getValue()+","+accRequest.getAttributeRequest("NetworkID").getValue()+","+Req+")");
              st.executeUpdate();
              
              String query2 ="DELETE FROM test.jdbcusers where GroupId is Null and Name=?";
              PreparedStatement st2 = connection.prepareStatement(query2);
              st2.setString(1, plan.getNativeIdentity());
              System.out.println("FinalQuery===DELETE FROM test.jdbcusers where GroupId is Null and Name="+plan.getNativeIdentity());
              st2.executeUpdate();
            }
            for(String Req:RemReqList){
              String query ="DELETE FROM test.jdbcusers where GroupId=? and Name=?";
              PreparedStatement st = connection.prepareStatement(query);
              st.setString(1,  Req);
              st.setString(2, plan.getNativeIdentity());
              System.out.println("FinalQuery===DELETE FROM test.jdbcusers where GroupId="+Req+" and Name="+plan.getNativeIdentity());
              st.executeUpdate();
            }
            provresult.setStatus(ProvisioningResult.STATUS_COMMITTED);
            System.out.println("JDBC Application- Modify User Result is " +provresult.toXml());
          }

          //for Delete Operation---
          if(AccountRequest.Operation.Delete.equals(accRequest.getOperation())) {
            System.out.println("Plan Operation is === "+accRequest.getOperation());
            String query ="DELETE FROM test.jdbcusers where Name=?";
            PreparedStatement st = connection.prepareStatement(query);
            st.setString(1, plan.getNativeIdentity());
            System.out.println("FinalQuery===DELETE FROM test.jdbcusers where Name="+plan.getNativeIdentity());
            st.executeUpdate();
            provresult.setStatus(ProvisioningResult.STATUS_COMMITTED);
            System.out.println("JDBC Appliaction- Delete User Result is " +provresult.toXml());
          }
        } 
        catch (Exception e) {
          System.out.println("JDBCApplication Error e: " +e.getMessage()); 
          e.printStackTrace();
        }
        if (connection != null)
          connection.close();

      }      
    }  
  }

  return provresult;]]></Source>
        

</Rule>
